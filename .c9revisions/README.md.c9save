{"ts":1380927417419,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Nail\n====\nAbout\n-----\nNail is a cutomizable, framework-independent tool for js/coffee class creation.\n\nEvery aspect of the class (properties, methods, inhitence) is handled by an\nindependent module.\n\nAll modules (incuding the core) can be replaced.\n\nCreating your custom version of nail is easy:\n\n    module.exports = require('nail-core').use(\n        require 'nail-extend'\n        require 'nail-properties'\n        require 'nail-methods'\n        require './my/awesome/module.js'\n    )\n\nThis package contains the most common modules ('nail-extend','nail-properties', 'nail-methods')\n\nFeatures\n--------\n - properties with combined setter getter method\n - methods with overload support\n - classic inheritance (prototype chain)\n - classes are added to a container (for example moduele.exports)\n - classes have a fully qualified name\n\nDocumentation\n-------------\nYou can find in depth descriptions on the features in the [docs](../../tree/master/docs) directory.\n\nExample\n-------\nLet us define some classes:\n\n    nail = require('nail')\n    nail.to exports, 'myPakage', MyParent:\n        methods:\n            init: (properties) ->\n                for name,value of properties\n                    @[name] value\n            hello: -> 'hello'\n\n    nail.to exports, 'myPackage', MyChild:\n        extend: exports.MyParent\n        prperties:\n            name:   'anon'\n        methods:\n            hello:\n                0: -> @hello(@name)\"\n                n: (otherName) -> \"hello #{name}\"\n\n    bob = new exports.Mychild(name: 'Bob')\n    bob.hello() #\"hello Bob\"\n    bob.name 'Holy Bob'\n    bob.hello() #\"hello Holly Bob\"\n    bob.hello('stranger') #\"hello stranger\""]],"start1":0,"start2":0,"length1":0,"length2":1656}]],"length":1656}
{"contributors":[],"silentsave":false,"ts":1381257793663,"patch":[[{"diffs":[[-1,"Nail\n====\nAbout\n-----\nNail is a cutomizable, framework-independent tool for js/coffee class creation.\n\nEvery aspect of the class (properties, methods, inhitence) is handled by an\nindependent module.\n\nAll modules (incuding the core) can be replaced.\n\nCreating your custom version of nail is easy:\n\n    module.exports = require('nail-core').use(\n        require 'nail-extend'\n        require 'nail-properties'\n        require 'nail-methods'\n        require './my/awesome/module.js'\n    )\n\nThis package contains the most common modules ('nail-extend','nail-properties', 'nail-methods')\n\nFeatures\n--------\n - properties with combined setter getter method\n - methods with overload support\n - classic inheritance (prototype chain)\n - classes are added to a container (for example "],[1,"\n[glob]: https://npmjs.org/package/glob\n[grunt-contrib-coffee]: https://github.com/gruntjs/grunt-contrib-coffee\n[grunt-istanbul-coverage]: https://github.com/daniellmb/grunt-istanbul-coverage\n[grunt-istanbul]: https://github.com/taichi/grunt-istanbul\n[grunt-simple-mocha]: https://github.com/yaymukund/grunt-simple-mocha\n[grunt]: http://gruntjs.com/\n[install]: http://github.com/benjamn/install\n[mocha]: https://npmjs.org/package/mocha\n[nail-common]: https://npmjs.org/package/nail-common\n[nail-core]: https://github.com/noptic/nail-core\n[npm]: https://npmjs.org/doc/\n[should]: https://github.com/visionmedia/should.js\n[underscore]: http://underscorejs.org\n\n\n[About]: spec/About.coffee.md\n\nnail - simple modular classes\n=============================\nNail is a simple but flexble tool for creating coffe/java script classes.\n\nNail uses the powefull [nail-core] API to handlethe propertiesmethods and\niheritance with seperate replacable modules.\n\nClass definitions in nail are well strcutured and tool friendly.\n\nUsgae\n=======\nTo ensure that the examle code is always up to date it is run as a test.\nThis requires an  instrumented version of nail itself and the  modules \nunderscore and should.\n\nIn your productive code `nail = require 'nail'` should be enough.\n\n    nail    = require '../coverage/instrument/lib/"],[0,"modu"],[-1,"e"],[0,"le."],[-1,"exports)\n - classes have a fully qualified name\n\nDocumentation\n-------------\nYou can find in depth descriptions on the features in the [docs](../../tree/master/docs) directory.\n\nExample\n-------\nLet us define some classes:\n\n    nail = require('nail')\n    nail.to exports, 'myPakage', MyParent:"],[1,"js'\n    should  = require 'should'\n    _       = require 'underscore'\n\nThe following code defines 2 classes, a general Person class and a more \nspecific User class which is a child of Person.\n    \n    nail.to exports, 'my-module',\n      \n      Person:\n        properties:\n          displayName:  null\n          lastSeen:     0"],[0,"\n   "]],"start1":0,"start2":0,"length1":1078,"length2":1648},{"diffs":[[0,"    "],[-1,"  init: (properties"],[1,"touch: (time"],[0,") ->"],[1," "],[0,"\n   "]],"start1":1668,"start2":1668,"length1":31,"length2":25},{"diffs":[[0,"    "],[-1,"    for name,value of properties\n                    @[name] value\n            hello: -> 'hello'\n\n    nail.to exports, 'myPackage', MyChild:"],[1,"if arguments.length == 0\n                time = new Date().getTime()\n            @lastSeen = time\n        \n      User:      "],[0,"\n   "]],"start1":1698,"start2":1698,"length1":148,"length2":132},{"diffs":[[0,"    "],[-1,"extend: exports.MyParent"],[1,"parent: 'my-module.Person'"],[0,"\n   "]],"start1":1831,"start2":1831,"length1":32,"length2":34},{"diffs":[[0,"      pr"],[1,"o"],[0,"perties:"]],"start1":1864,"start2":1864,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"name:   'anon'\n        methods:\n            hello:\n                0: -> @hello(@name)\"\n                n: (otherName) -> \"hello #{name}\"\n\n    bob = new exports.Mychild(name: 'Bob')\n    bob.hello() #\"hello Bob\"\n    bob.name 'Holy Bob'\n    bob.hello() #\"hello Holly Bob\"\n    bob.hello('st"],[1,"login:          null\n            passwordHash:   null\n        methods:\n            init: (displayName, lastSeen, login, passwordHash) ->\n                @::prototype.init.call @, displayName, lastSeen\n                @login = login ? null\n                @passwordHash = passwordHash ? null\n    \n\n##Setup\nInstall with npm:\n```bash\nnpm install nail\n```\n\nClone with GIT:\n```bash\ngit clone https://github.com/noptic/nail.git\n```\n\n##Documentation\nHead here â†’ [docs](docs)\n\n##Dependencies\n - [nail-common] 0.1.0-alpha2\n - [install] ~0.1.7\n - [npm] ~1.3.11\n - [underscore] ~1.5.2\n - [nail-core] 0.1.0-beta3\n\n##DevDependencies\n - [grunt-contrib-coffee] 0.7.0\n - [grunt] 0.4.1\n - [grunt-simple-mocha] ~0.4.0\n - [mocha] ~1.12.0\n - [should] ~1.2.2\n - [grunt-istanbul-cove"],[0,"ra"],[-1,"n"],[0,"ge"],[-1,"r') #\"hello "],[1,"] 0.0.1\n - [grunt-i"],[0,"st"],[-1,"r"],[0,"an"],[-1,"ger\""],[1,"bul] ~0.2.3\n - [glob] ~3.2.6\n - [underscore] ~1.5.2\n"]],"start1":1890,"start2":1890,"length1":317,"length2":844}]],"length":2734,"saved":false}
{"contributors":[],"silentsave":false,"ts":1381264904890,"patch":[[{"diffs":[[0,"y.\n\n"],[-1,"Usgae\n"],[1,"Aout this document\n==========="],[0,"===="]],"start1":1007,"start2":1007,"length1":14,"length2":38},{"diffs":[[0," is "],[-1,"always "],[0,"up t"]],"start1":1079,"start2":1079,"length1":15,"length2":8},{"diffs":[[0,"s a test"],[-1,"."],[1,"-"],[0,"\nThis re"]],"start1":1105,"start2":1105,"length1":17,"length2":17},{"diffs":[[0,"res "],[-1,"an  instrumented version of nail itself and the  modules \nunderscore and should.\n"],[1,"[underscore], [should] and an instrumented version of nail."],[0,"\nIn "]],"start1":1125,"start2":1125,"length1":89,"length2":67},{"diffs":[[0,"e'\n\n"],[-1,"The following code defines 2"],[1,"Overview\n========\nThe nail concept:\n\n - class definitions are objects\n - every key in the definition is a"],[0," class"],[-1,"es, a general Person class and a more \nspecific User class which is a child of Person"],[1,"\n - every aspect of a class has a seperate block\n\nNail uses the API defined by [nail-core] and modules from [nail-common].\n\nUsage\n=====\n###Creating a class\nThe following code defines the class `Person` and adds it to exports and the \nnamespace 'my-module'"],[0,".\n  "]],"start1":1380,"start2":1380,"length1":127,"length2":374},{"diffs":[[0,"le',"],[-1,"\n      \n     "],[0," Per"]],"start1":1786,"start2":1786,"length1":21,"length2":8},{"diffs":[[0,"Person:\n"],[-1,"  "],[0,"      pr"]],"start1":1791,"start2":1791,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"  display"],[1,"first"],[0,"Name"]],"start1":1821,"start2":1821,"length1":17,"length2":13},{"diffs":[[0,"    "],[-1,"  "],[0,"last"],[-1,"Seen:     0\n  "],[1,"Name:   null\n"],[0,"    "]],"start1":1846,"start2":1846,"length1":28,"length2":25},{"diffs":[[0,"    "],[-1,"  touch: (time) -> \n            if arguments.length == 0"],[1,"getFormatedName: -> return \"#{@lastName}, #{@firstName}\"\n\nNow our package exports the constructor for Person.\n    \n    describe 'Person', ->\n      it 'is a function', -> \n        (_.isFunction exports.Person).should.be.ok\n\n###creating an instance\nProperties are injected into the new Instance."],[0,"\n    "],[1,"\n"],[0,"    "],[-1,"        time = new Date().getTime()\n            @lastSeen = time\n        \n      User:      \n        parent: '"],[1,"dalia = new exports.Person\n      firstName: 'Dalia'\n      lastName:  'Scarlet'\n    it 'injects properties', ->\n      dalia.firstName.should.equal 'Dalia'\n      dalia.lastName.should.equal  'Scarlet'\n    it 'creates methods', ->\n      dalia.getFormatedName().should.equal 'Scarlet, Dalia'\n\n###using namespaces\nUsing namespaces will give evry class a unique name. This name can be used\nto when using resources.\n\nFor a demonstrtion we will use a very simple generic factory function.\n\n    it \"can be loaded from json\", ->\n      sampleJSON =\"\"\"\n                  {\n                    \"type\": \""],[0,"my-m"]],"start1":1886,"start2":1886,"length1":182,"length2":901},{"diffs":[[0,"rson"],[-1,"'\n"],[1,"\",\n "],[0,"        "],[1,"           \""],[0,"prop"]],"start1":2795,"start2":2795,"length1":18,"length2":32},{"diffs":[[0,"     \"properties"],[-1,":"],[1,"\":{"],[0,"\n            log"]],"start1":2817,"start2":2817,"length1":33,"length2":35},{"diffs":[[0,"    "],[-1,"login:"],[1,"          \"firstName\": \"Nick\",\n"],[0,"    "]],"start1":2845,"start2":2845,"length1":14,"length2":39},{"diffs":[[0,"        "],[-1,"null\n"],[0,"        "]],"start1":2882,"start2":2882,"length1":21,"length2":16},{"diffs":[[0,"    "],[-1,"passwordHash:   null\n        methods:\n            init: (displayName, lastSeen, login, passwordHash) ->\n                @::prototype.init.call @, displayName, lastSeen"],[1,"\"lastName\":  \"Pudel\"   \n                    }\n                  }\n                \"\"\"\n      loadObject = (data) -> new nail.lib[data.type] data.properties"],[0,"\n    "],[-1,"    "],[1,"\n"],[0,"      "],[-1,"  @login = login ? null\n                @passwordHash = passwordHash ? null\n   "],[1,"nick  = loadObject(JSON.parse sampleJSON)\n      nick.firstName.should.equal 'Nick'\n      nick.lastName.should.equal 'Pudel'\n      nick.getFormatedName().should.equal \"Pudel, Nick\""],[0," \n\n#"]],"start1":2898,"start2":2898,"length1":269,"length2":353}]],"length":3793,"saved":false}
