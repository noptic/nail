{"ts":1380926137784,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = (grunt) ->\n  grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n\n    coffee:\n      glob_to_multiple:\n        expand: true\n        cwd: 'src'\n        src: ['*.coffee']\n        dest: 'lib'\n        ext: '.js'\n\n    nodeunit:\n      files: ['test/**/*_test.coffee','test/**/*_test.js']\n\n    watch:\n      src:\n        files: ['src/**/*.coffee']\n        tasks: ['coffee']\n      lib:\n        files: ['lib/**/*.js']\n        tasks: ['nodeunit']\n      test:\n        files: ['test/**/*.coffee']\n        tasks: ['nodeunit']\n\n  grunt.loadNpmTasks 'grunt-contrib-coffee'\n  grunt.loadNpmTasks 'grunt-contrib-nodeunit'\n  grunt.loadNpmTasks 'grunt-contrib-watch'\n\n  grunt.registerTask 'default', ['coffee']\n"]],"start1":0,"start2":0,"length1":0,"length2":716}]],"length":716}
{"contributors":[],"silentsave":false,"ts":1380926919734,"patch":[[{"diffs":[[1,"'use strict'\n"],[0,"module.e"]],"start1":0,"start2":0,"length1":8,"length2":21},{"diffs":[[0,">\n  "],[-1,"grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n\n    coffee:\n      glob_to_multiple"],[1,"fs        = require 'fs'\n  glob      = require 'glob'\n  _         = require 'underscore'\n  path      = require 'path'\n  \n  configuration = grunt.file.readJSON('build.json')\n  #each component requires a .coffe file in src and a coffe.md file in spec\n  components  = configuration.build?.components ?[]\n  #non component source files\n  sourceFiles = configuration.build?.sourceFiles ?[]\n\n  for component in components\n    sourceFiles.push \"src/#{component}.coffee\"\n\n  tests = \"#{configuration.path.tests}/**/*.js\"\n  tasks = \"lib/**/*.js\"\n  links = false\n\n  grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n\n    coffee:\n      options:\n        bare: true\n      compile:\n        files:\n          \"lib/module.js\": sourceFiles\n      specs"],[0,":\n  "]],"start1":39,"start2":39,"length1":105,"length2":751},{"diffs":[[0,"wd: "],[-1,"'src'"],[1,"configuration.path.specs"],[0,"\n   "]],"start1":818,"start2":818,"length1":13,"length2":32},{"diffs":[[0,"rc: "],[-1,"["],[0,"'"],[1,"./**/"],[0,"*.coffee"],[1,".md"],[0,"'"],[-1,"]"],[0,"\n   "]],"start1":856,"start2":856,"length1":20,"length2":26},{"diffs":[[0,"st: "],[-1,"'lib'"],[1,"configuration.path.tests"],[0,"\n   "]],"start1":889,"start2":889,"length1":13,"length2":32},{"diffs":[[0,"    "],[-1,"nodeunit:\n      files: ['test/**/*_test.coffee','test/**/*_test.js']\n\n    watch"],[1,"simplemocha:\n      options:\n        globals: ['should']\n        timeout: 3000\n        ignoreLeaks: false\n        ui: 'bdd'\n        reporter: 'spec'\n      all:\n        src: tests\n\n    instrument:\n      files: tasks\n      options:\n        lazy: false\n        basePath: \"#{configuration.path.coverage}/instrument/\"\n\n    storeCoverage:\n      options:\n        dir: configuration.path.coverage\n\n    reloadTasks:\n      rootPath: \"#{configuration.path.coverage}/instrument/lib\"\n\n    makeReport:\n      src: \"#{configuration.path.coverage}/**/*.json\"\n      options:\n        type: \"lcov\"\n        dir: \"#{configuration.path.docs}/coverage\"\n        print: \"detail\"\n\n\n    coverage:\n      options:\n        thresholds"],[0,":\n      "],[1," "],[-1,"src:\n        files: ['src/**/*."],[1,"   'statements': configuration.coverage.statements\n          'branches':   configuration.coverage.branches\n          'lines':      configuration.coverage.lines\n          'functions':  configuration.coverage.functions\n        dir: 'coverage/reports',\n        root: '.'\n\n\n  grunt.loadNpmTasks 'grunt-contrib-"],[0,"coffee'"],[-1,"]"],[0,"\n  "],[-1,"      tasks: ['coffee"],[1,"grunt.loadNpmTasks 'grunt-simple-mocha'\n  grunt.loadNpmTasks 'grunt-istanbul-coverage'\n  grunt.loadNpmTasks 'grunt-istanbul'\n\n  grunt.registerTask 'test', ['coffee','simplemocha"],[0,"']\n"],[1,"\n"],[0,"  "],[-1,"    lib:\n        files: ['lib/**/*.js']"],[1,"grunt.registerTask 'default', [\n    'links'\n    'docs'\n    'readme'\n    'coverageReport'\n    'coverage'\n  ]\n\n  grunt.registerTask 'coverageReport', [\n    'coffee'\n    'instrument'\n    'reloadTasks'\n    'simplemocha'\n    'storeCoverage'\n    'makeReport'\n  ]\n\n  grunt.registerTask 'docs', ['links','write-documentation']\n  \n  grunt.registerTask 'links', ->\n    base      = configuration.path.specs\n    extension = configuration.extension.spec\n    files = glob.sync \"#{base}/**/*#{extension}\"\n    \n    grunt.verbose.writeln \"Link files:\"\n    grunt.verbose.writeln files.join(\"\\n\")\n    \n    links =\n      external: ''\n      perDirectory:    {}\n      manual:    ''\n      \n    mdLink = (name,url) -> \"[#{name}]: #{url}\\n\""],[0,"\n    "],[1,"\n"],[0,"    "],[-1,"tasks: ['nodeunit']\n      test:\n        files: ['test/**/*.coffee']\n        tasks: ['nodeunit']\n\n  grunt.loadNpm"],[1,"#get internal links\n    directories = _.uniq( _.map(files, path.dirname) )\n    directories.push '.'\n    for directory in directories \n      links.perDirectory[directory] = ''\n      for file in files\n        name = file\n            .substring(base.length+1,file.length - extension.length)\n            .replace('/','.')\n        links.perDirectory[directory] += mdLink(\n            name, \n            path.relative(directory, file)\n        )\n\n    #get external Links\n    for packageFile in  glob.sync 'node_modules/*/package.json'\n      packageInfo = require \"./#{packageFile}\"\n      linkAdress = packageInfo.homepage ? \"https://npmjs.org/package/#{[packageInfo.name]}\"\n      links.external += mdLink(packageInfo.name, linkAdress)\n    \n    #manualLinks\n    for name,url of configuration.see\n      links.manual += mdLink(name,url)\n    \n  grunt.register"],[0,"Task"],[-1,"s"],[0," '"],[-1,"grunt-contrib-coffee'\n  grunt.loadNpmTasks 'grunt-contrib-nodeunit'\n  grunt.loadNpmTasks 'grunt-contrib-watch'\n\n  grunt.registerTask 'default', ['coffee']\n"],[1,"write-documentation', ->\n    target    = configuration.path.docs\n    base      = configuration.path.specs\n    extension = configuration.extension.spec\n    \n    files = glob.sync \"#{base}/**/*#{extension}\"\n    for directory,specs of _.groupBy(files, path.dirname)\n      targetDirectory = '.'\n      for dir in (target + directory.substring(base.length)).split('/')\n        targetDirectory += \"/#{dir}\"\n        if ! fs.existsSync(targetDirectory)\n          fs.mkdirSync targetDirectory\n      for spec in specs\n        fs.writeFileSync(targetDirectory+'/'+path.basename(spec), [\n            links.external\n            links.perDirectory[directory]\n            links.manual\n            fs.readFileSync(spec).toString()\n          ].join(\"\\n\")\n        )\n\n  grunt.registerTask 'readme', ->\n    packageInfo = require './package.json'\n    readme      = ['']\n    \n    if (!links) \n      grunt.task.run('links')\n    readme.push [links.external, links.manual, links.perDirectory['.']].join(\"\\n\")\n    readme.push fs.readFileSync 'spec/About.coffee.md'\n    readme.push \"\"\"\n      \n      ##Setup\n      Install with npm:\n      ```bash\n      npm install #{packageInfo.name}\n      ```\n      \n      Clone with GIT:\n      ```bash\n      git clone #{packageInfo.repository.url}\n      ```\n      \n      ##Documentation\n      Head here â†’ [#{configuration.path.docs}](#{configuration.path.docs})\n      \n                \"\"\"\n    for dependencyType in ['dependencies', 'devDependencies']\n      if (_.has packageInfo, dependencyType)\n        title = dependencyType.charAt(0).toUpperCase() + dependencyType.slice(1)\n        readme.push \"###{title}\"\n        for name,version of packageInfo[dependencyType]\n          readme.push \" - [#{name}] #{version}\"\n        readme.push('')\n    fs.writeFileSync('README.md', readme.join(\"\\n\"))\n    \n    "]],"start1":938,"start2":938,"length1":481,"length2":4598}]],"length":5536,"saved":false}
